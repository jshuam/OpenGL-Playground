#version 400 core

uniform float max_lights;

in vec3 position;
in vec2 texture_coords;
in vec3 normal;

out vec2 pass_texture_coords;
out vec3 surface_normal;
out vec3 to_light_vec[10];
out vec3 to_camera_vec;
out float visibility;

uniform mat4 transformation_matrix;
uniform mat4 projection_matrix;
uniform mat4 view_matrix;
uniform vec3 light_position[10];

const float density = 0.007;
const float gradient = 1.5;

uniform vec4 plane;

void main( void )
{
	vec4 world_position = transformation_matrix * vec4( position, 1.0 );

	gl_ClipDistance[0] = dot( world_position, plane );

	vec4 position_relative_to_cam = view_matrix * world_position;
	gl_Position = projection_matrix * view_matrix * world_position;
	pass_texture_coords = texture_coords;
	surface_normal = ( transformation_matrix * vec4( normal, 0.0 ) ).xyz;
	for( int i = 0; i < max_lights; i++ )
	{
		to_light_vec[i] = light_position[i] - world_position.xyz;
	}
	to_camera_vec = ( inverse( view_matrix ) * vec4( 0.0, 0.0, 0.0, 1.0 ) ).xyz - world_position.xyz;

	float distance = length( position_relative_to_cam.xyz );
	visibility = exp( -pow( ( distance * density ), gradient ) );
	visibility = clamp( visibility, 0.0, 1.0 );
}