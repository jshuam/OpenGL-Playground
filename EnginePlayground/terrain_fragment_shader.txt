#version 400 core

uniform float max_lights;

in vec2 pass_texture_coords;
in vec3 surface_normal;
in vec3 to_light_vec[4];
in vec3 to_camera_vec;
in float visibility;

out vec4 out_colour;

uniform sampler2D background_texture;
uniform sampler2D r_texture;
uniform sampler2D g_texture;
uniform sampler2D b_texture;
uniform sampler2D blend_map;

uniform vec3 light_colour[4];
uniform float shine_damper;
uniform float reflectivity;
uniform vec3 sky_colour;

void main ( void )
{
	vec4 blend_map_colour = texture( blend_map, pass_texture_coords );

	float back_texture_amount = 1 - ( blend_map_colour.r + blend_map_colour.g + blend_map_colour.b );
	vec2 tiled_coords = pass_texture_coords * 40.0;
	vec4 background_texture_colour = texture( background_texture, tiled_coords ) * back_texture_amount;
	vec4 r_texture_colour = texture( r_texture, tiled_coords ) * blend_map_colour.r;
	vec4 g_texture_colour = texture( g_texture, tiled_coords ) * blend_map_colour.g;
	vec4 b_texture_colour = texture( b_texture, tiled_coords ) * blend_map_colour.b;

	vec4 total_colour = background_texture_colour + r_texture_colour + g_texture_colour + b_texture_colour;

	vec3 unit_normal = normalize( surface_normal );
	vec3 unit_to_camera_vec = normalize( to_camera_vec );

	vec3 total_diffuse = vec3( 0.0 );
	vec3 total_specular = vec3( 0.0 );

	for( int i = 0; i < max_lights; i++ )
	{
		vec3 unit_light = normalize( to_light_vec[i] );
		float n_dot_l = dot( unit_normal, unit_light );
		float brightness = max( n_dot_l, 0.0 );
		vec3 light_direction = -unit_light;
		vec3 reflected_light_direction = reflect( light_direction, unit_normal );
		float specular_factor = dot( reflected_light_direction, unit_to_camera_vec );
		specular_factor = max( specular_factor, 0.0 );
		float damped_factor = pow( specular_factor, shine_damper );
		vec3 diffuse = total_diffuse + brightness * light_colour[i];
		vec3 final_specular = total_specular + damped_factor * reflectivity * light_colour[i];
	}
	total_diffuse = max( total_diffuse, 0.2 );
	
	out_colour = vec4( total_diffuse, 1.0 ) * total_colour + vec4( total_specular, 1.0 );
	out_colour = mix( vec4( sky_colour, 1.0 ), out_colour, visibility );
}