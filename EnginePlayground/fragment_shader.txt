#version 400 core

in vec2 pass_texture_coords;
in vec3 surface_normal;
in vec3 to_light_vec;
in vec3 to_camera_vec;

out vec4 out_colour;

uniform sampler2D texture_sampler;
uniform vec3 light_colour;
uniform float shine_damper;
uniform float reflectivity;

void main ( void )
{
	vec3 unit_normal = normalize( surface_normal );
	vec3 unit_light = normalize( to_light_vec );

	float n_dot_l = dot( unit_normal, unit_light );
	float brightness = max( n_dot_l, 0.2 );
	vec3 diffuse = brightness * light_colour;

	vec3 unit_to_camera_vec = normalize( to_camera_vec );
	vec3 light_direction = -unit_light;
	vec3 reflected_light_direction = reflect( light_direction, unit_normal );

	float specular_factor = dot( reflected_light_direction, unit_to_camera_vec );
	specular_factor = max( specular_factor, 0.0 );
	float damped_factor = pow( specular_factor, shine_damper );
	vec3 final_specular = damped_factor * reflectivity * light_colour;

	vec4 texture_color = texture( texture_sampler, pass_texture_coords );
	if( texture_color.a < 0.5 )
	{
		discard;
	}

	out_colour = vec4( diffuse, 1.0 ) * texture_color + vec4( final_specular, 1.0 );
}