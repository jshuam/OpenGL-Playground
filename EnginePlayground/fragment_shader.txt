#version 400 core

uniform float max_lights;

in vec2 pass_texture_coords;
in vec3 surface_normal;
in vec3 to_light_vec[4];
in vec3 to_camera_vec;
in float visibility;

out vec4 out_colour;

uniform sampler2D texture_sampler;
uniform vec3 light_colour[4];
uniform vec3 attenuation[4];
uniform float shine_damper;
uniform float reflectivity;
uniform vec3 sky_colour;

void main ( void )
{
	vec3 unit_normal = normalize( surface_normal );
	vec3 unit_to_camera_vec = normalize( to_camera_vec );

	vec3 total_diffuse = vec3( 0.0 );
	vec3 total_specular = vec3( 0.0 );

	for( int i = 0; i < max_lights; i++ )
	{
		float distance = length( to_light_vec[i] );
		float att_factor = attenuation[i].x + attenuation[i].y * distance + attenuation[i].z * pow( distance, 2 );
		vec3 unit_light = normalize( to_light_vec[i] );
		float n_dot_l = dot( unit_normal, unit_light );
		float brightness = max( n_dot_l, 0.0 );
		vec3 light_direction = -unit_light;
		vec3 reflected_light_direction = reflect( light_direction, unit_normal );
		float specular_factor = dot( reflected_light_direction, unit_to_camera_vec );
		specular_factor = max( specular_factor, 0.0 );
		float damped_factor = pow( specular_factor, shine_damper );
		total_diffuse = total_diffuse + ( brightness * light_colour[i] ) / att_factor;
		total_specular = total_specular + ( damped_factor * reflectivity * light_colour[i] ) / att_factor;
	}
	total_diffuse = max( total_diffuse, 0.2 );

	vec4 texture_color = texture( texture_sampler, pass_texture_coords );
	if( texture_color.a < 0.5 )
	{
		discard;
	}

	out_colour = vec4( total_diffuse, 1.0 ) * texture_color + vec4( total_specular, 1.0 );
	out_colour = mix( vec4( sky_colour, 1.0 ), out_colour, visibility );
}